pipeline {
    agent any

    environment {
        DOCKER_REGISTRY_URL = credentials('DOCKER_REGISTRY_URL_ID')
        HARBOR_CREDENTIAL = credentials('HARBOR_CREDENTIAL_ID')
        GIT_USER_EMAIL = credentials('GIT_USER_EMAIL_ID')
        GIT_CREDENTIAL = credentials('GIT_CREDENTIAL_ID')
        DISCORD_WEBHOOK = credentials("Donggu-portfolio-webhook")    
        CACHE_DIR = "/var/jenkins_home/npm_cache/dorong9-react-portfolio"
    }

    tools {
        nodejs 'NodeJS-22.4.0' // Jenkins에서 구성한 Node.js 도구 이름 사용
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    // Discord 빌드 시작 메시지 보내기
                    discordSend title: "동구 포트폴리오(React)", 
                                description: "빌드 시작!!",
                                link: env.BUILD_URL, result: currentBuild.currentResult, 
                                webhookURL: env.DISCORD_WEBHOOK

                    // 현재 커밋 해시 가져오기
                    def currentCommit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    
                    // 이전 빌드의 커밋 해시 가져오기 (없으면 빈 문자열)
                    def previousCommit = sh(script: 'git rev-parse HEAD~1 || echo ""', returnStdout: true).trim()

                    def changes = sh(script: "git diff --name-only ${previousCommit} ${currentCommit} -- package.json", returnStdout: true).trim()

                    // 캐시된 node_modules가 있는지 확인
                    def cacheExists = fileExists "${CACHE_DIR}/node_modules"

                    if (changes || !cacheExists) {
                        echo 'package.json이 변경되었거나 캐시가 없습니다. 의존성을 새로 설치합니다.'
                        sh "rm -rf ${CACHE_DIR}"
                        sh 'npm install'
                        
                        // 새로 설치한 node_modules를 캐시
                        sh "mkdir -p ${CACHE_DIR}"
                        sh "cp -R node_modules ${CACHE_DIR}/"
                    } else {
                        echo '캐시된 node_modules를 사용합니다.'
                        sh "cp -R ${CACHE_DIR}/node_modules ."
                    }
                }             
            }
        }

        stage('npm run build') {
            steps {
                // 프로젝트 빌드
                sh 'export NODE_OPTIONS=--openssl-legacy-provider'
                sh 'npm run build'
            }                
        }

        stage('portfolio 이미지 빌드') {
            steps {
                script {
                    // build 된 결과물을 . 으로로 복사
                    sh "cp -r $WORKSPACE/.build ."  

                    // 현재 디렉토리 내용 확인
                    sh "ls -la"
                    
                    // nginx.conf 파일 복사
                    sh "cp CICD/nginx/nginx.conf ."

                    docker.withRegistry("http://${DOCKER_REGISTRY_URL}", "${HARBOR_CREDENTIAL}") {
                        def customImage = docker.build("donggu-portfolio/frontend:${env.BUILD_NUMBER}", "-f CICD/Dockerfile/Dockerfile1 .")
                        customImage.push()
                    }
                }
            }
        }

        stage('test용 이미지 빌드') {
            steps {
                script {
                    docker.withRegistry("http://${DOCKER_REGISTRY_URL}", "${HARBOR_CREDENTIAL}") {
                        def customImage = docker.build("donggu-private-project-1/test:${env.BUILD_NUMBER}", "-f CICD/Dockerfile/Dockerfile2 .")
                        customImage.push()
                    }
                }
            }
        }

        stage('Update Manifests for frontend') {
            steps {
                script { 
                    // Git repository information for manifests
                    def manifestsRepoUrl = 'https://github.com/DOLONG9/portfolio.git'
                    def manifestsRepoBranch = 'deploy'
                    
                    // Checkout manifests repository
                    git credentialsId: "${HARBOR_CREDENTIAL}", url: manifestsRepoUrl, branch: manifestsRepoBranch
                    sh """
                        git pull origin deploy
                        sed -i 's|harbor.dorong9.com/donggu-portfolio/frontend:.*|harbor.dorong9.com/donggu-portfolio/frontend:${env.BUILD_NUMBER}|' donggu-1/web/donggu-1-nginx.yaml
                        git add donggu-1/web/donggu-1-nginx.yaml
                        git config user.name 'DOLONG9'
                        git config user.email "${GIT_USER_EMAIL}"
                        git commit -m 'donggu-1/web/donggu-1-nginx.yaml ${currentBuild.number} image versioning'
                    """
                    withCredentials([gitUsernamePassword(credentialsId: "${GIT_CREDENTIAL}")]) {
                       sh "git remote set-url origin https://github.com/DOLONG9/portfolio.git" 
                       sh "git push origin deploy"
                    }
                }
            }
        }

        stage('Update Manifests for test') {
            steps {
                script { 
                    // Git repository information for manifests
                    def manifestsRepoUrl = 'https://github.com/DOLONG9/portfolio.git'
                    def manifestsRepoBranch = 'deploy'
                    
                    // Checkout manifests repository
                    git credentialsId: "${HARBOR_CREDENTIAL}", url: manifestsRepoUrl, branch: manifestsRepoBranch
                    sh """
                        git pull origin deploy
                        sed -i 's|harbor.dorong9.com/donggu-private-project-1/test:.*|harbor.dorong9.com/donggu-private-project-1/test:${env.BUILD_NUMBER}|' test/web/test-nginx.yaml
                        git add test/web/test-nginx.yaml
                        git config user.name 'DOLONG9'
                        git config user.email "${GIT_USER_EMAIL}"
                        git commit -m 'test/web/test-nginx.yaml ${currentBuild.number} image versioning'
                    """
                    withCredentials([gitUsernamePassword(credentialsId: "${GIT_CREDENTIAL}")]) {
                       sh "git remote set-url origin https://github.com/DOLONG9/portfolio.git" 
                       sh "git push origin deploy"
                    }
                }
            }
        }
    }

    post {
        success {
            discordSend title: "동구 포트폴리오(React)", 
                        description: "빌드 성공!!",            
                        footer: "젠킨스에서 확인하세요", 
                        link: env.BUILD_URL, result: currentBuild.currentResult, 
                        webhookURL: env.DISCORD_WEBHOOK
            script {
                // Docker 이미지 삭제
                sh "docker rmi donggu-portfolio/frontend:${env.BUILD_NUMBER}"
                sh "docker rmi ${DOCKER_REGISTRY_URL}/donggu-portfolio/frontend:${env.BUILD_NUMBER}"

                sh "docker rmi donggu-private-project-1/test:${env.BUILD_NUMBER}"
                sh "docker rmi ${DOCKER_REGISTRY_URL}/donggu-private-project-1/test:${env.BUILD_NUMBER}"            
            }                        
        }
        failure {
            script {
                discordSend title: "동구 포트폴리오(React)", 
                            description: "빌드 실패!!",
                            footer: "젠킨스에서 확인하세요", 
                            link: env.BUILD_URL, result: currentBuild.currentResult, 
                            webhookURL: env.DISCORD_WEBHOOK
            }
        }
        always {
            echo 'Workspace 정리..'
            deleteDir() // 워크스페이스의 모든 내용을 삭제
        }
    }
}
